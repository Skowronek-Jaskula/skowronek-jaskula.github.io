@use '../abstracts/variables' as *;
@use '../abstracts/colors' as *;

/// ## Additional description:
/// Due to the changing border depending on the state (hover, focus),
/// an alternative display of border as box-shadow is used.<br>
/// Thanks to this, we are able to maintain paddings regardless of the state of the elements (`focus`/`hover`/`active`).<br>
/// This is done by mixin box-shadow, which has four parameters:
/// because the border changes its width in the "focus" and "on hover" states,
/// we don\'t use **borders** for lines around the element. We use **box-shadows** for them.<br>
/// Thanks to this, we are able to maintain paddings regardless of the state of the elements (`focus`/`hover`/`active`).
/// @example scss - Usage
/// .element {
///     box-shadow: inset 0 0 0 $width-hover $highlight;
/// }
///
/// @example css - CSS output
/// .element {
///     box-shadow: inset 0 0 0 0.0625rem #e17100;
/// }
/// @param {String} $state `hover`, `focus`, `normal` - **(required)**
/// @param {String} $color [false] if set, the default color is overwritten (eg: disabled elements with grey border)

@mixin box-shadows($state, $color: false) {
  @if $state == 'hover' {
    box-shadow: inset 0 0 0 $width-hover $highlight;

    @if $color {
      box-shadow: inset 0 0 0 $width-hover $color;
    }
  }

  @if $state == 'focus' {
    box-shadow:
      inset 0 0 0 #{$width-focus-inner} $main,
      0 0 0 $width-focus-outer $focus;
  }

  @if $state == 'normal' {
    @if $color {
      box-shadow: inset 0 0 0 #{$width} $color;
    } @else {
      box-shadow: inset 0 0 0 #{$width} $main;
    }
  }
}
